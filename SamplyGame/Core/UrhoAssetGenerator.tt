<#@ template language="C#" hostspecific="True"  #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#

	var Namespace = "SamplyGame";
	var ClassName = "Assets";
	var ImportCoreData = true;
	var AssetDirectory = "..\\Assets";
	var Paths = new string [] { 
		"Data"
	};

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:<#= System.Environment.Version #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by UrhoAssetGenerator.tt, Version=1.
// 

using System;

namespace <#= Namespace #>
{
	public static class <#= ClassName #> 
	{

<#
	Init(ImportCoreData, AssetDirectory, Paths);

	foreach (var item in output)
	{
#>
		public static class <#= item.Key #>
		{
		<# foreach (var file in item.Value.Values) { #>
	public const string <#= file.Prefix + ToPascalCase(file.FileName) #> = "<#= GetUrhoFilePath(file) #>";
		<# } #>
}

<#
	}
#>
	}

}


<#+
	Dictionary<string, Dictionary<string, FileItem>> output = new Dictionary<string, Dictionary<string, FileItem>>();

	class FileItem
	{
		public string FileName;
		public string Path;
		public string DirectoryName;
		public string Prefix;
		public string BasePath;
		public bool FromCoreData = false;
	}

	void Init(bool checkCoreData, string assetDirectory, string[] paths) 
	{

		if (checkCoreData) 
		{
			var coreDataPath = System.IO.Path.Combine(assetDirectory, "CoreData.pak");
			var coreDataFile = Host.ResolvePath(coreDataPath);

			if (File.Exists(coreDataFile))
			{
                LoadCoreData(coreDataFile);
			}
		}

		foreach(var item in paths) {
			var dirPath = System.IO.Path.Combine(assetDirectory, item);
			var path = Host.ResolvePath(dirPath);
			var directories = Directory.GetDirectories(path);
		
			foreach(var dir in directories) {
				var dirName = Path.GetFileName(dir);
				SearchDirectory(dirName, "", dir, path);
			}
		}
	}

	void LoadCoreData (string filePath) 
	{
		var package = new PackageFile(filePath);
		foreach (var file in package.Entries)
		{
			var dirName = file.Name.Substring(0, file.Name.IndexOf("/"));
			var fileName = System.IO.Path.GetFileNameWithoutExtension(file.Name);

			var inx = file.Name.IndexOf("/");
			var prefix = file.Name.Substring(inx, file.Name.LastIndexOf("/") - inx);
			//That mean we don't have prefix here
			if (prefix.Length < 2) prefix = string.Empty;
			else prefix = prefix.Substring(1).Replace("/", "_") + "_";

			if (!output.ContainsKey(dirName))
				output[dirName] = new Dictionary<string, FileItem>();

			var list = output[dirName];
			list[fileName] = new FileItem {
				FileName = fileName,
				Path = file.Name,
				Prefix = prefix,
				DirectoryName = dirName,
				BasePath = "",
				FromCoreData = true
			};
		}
	}

	void SearchDirectory (string name, string prefix, string dirPath, string basePath) 
	{
		var files = Directory.GetFiles(dirPath);
		if (!output.ContainsKey(name))
			output[name] = new Dictionary<string, FileItem>();

		var list = output[name];

		foreach(var file in files) {
			var fileName = Path.GetFileNameWithoutExtension(file);
			if (list.ContainsKey(fileName))
			{
				if (list[fileName].FromCoreData) continue;
				fileName = Path.GetFileName(file);
			}

			list[fileName] = new FileItem {
				FileName = fileName,
				Path = file,
				Prefix = prefix,
				DirectoryName = name,
				BasePath = basePath
			};
		}

		var directories = Directory.GetDirectories(dirPath);
		foreach(var subDir in directories) {
			var subDirName = Path.GetFileName(subDir);
			SearchDirectory(name, prefix + subDirName + "_", subDir, basePath);
		}
	}

	string GetUrhoFilePath(FileItem item) 
	{
		return item.Path
			.Substring(item.BasePath.Length > 0 ? item.BasePath.Length + 1 : 0)
			.Replace("\\", "/");
	}

	
    public static string ToKebabCase(string value)
    {
        if (string.IsNullOrEmpty(value))
            return value;

        return Regex.Replace(
            value,
            "(?<!^)([A-Z][a-z]|(?<=[a-z])[A-Z])",
            "-$1",
            RegexOptions.Compiled)
            .Trim()
            .ToLower();
    }

    public static string ToPascalCase(string s)
    {
        StringBuilder sb = new StringBuilder(s.Length);
        int a = 1, b = 1;
        bool toUpper = true;

        for (int i = 0; i < s.Length; i++)
        {
            switch (s[i])
            {
				case '.':
				case ' ':
                case '-':
                case '_':
                    if (a != b)
                    {
                        sb.Append(s.Substring(a, b - a));
                    }
                    a = b = i + 2;
                    toUpper = true;
                    break;

                default:
                    if (toUpper)
                    {
                        sb.Append(char.ToUpper(s[i]));
                        toUpper = false;
                    }
                    else
                    {
                        b++;
                    }
                    break;
            }
        }

        if (a != b)
        {
            sb.Append(s.Substring(a, b - a));
        }

        return sb.ToString();
    }

#>
<#+

	//https://github.com/morsm/UrhoPackageExtract/blob/master/PackageFile.cs

	/*
	* https://github.com/morsm/UrhoPackageExtract/blob/master/LICENSE.md
	* BSD 2-clause Simplified License
	* Copyright (c) 2017, Maarten ter Mors
	* All rights reserved.
	* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

    public class PackageEntry
    {
        public string Name { get; set; }
        public UInt32 Offset { get; set; }
        public UInt32 Length { get; set; }
    }

	public class PackageFile : IDisposable
    {
        private FileStream _file = null;
        private BinaryReader _reader = null;
        private UInt32 _numberOfFiles = 0;
        private Dictionary<string, PackageEntry> _files = new Dictionary<string, PackageEntry>();

		public bool Compressed = false;
        public Dictionary<string, PackageEntry>.ValueCollection Entries
        {
            get
            {
                return _files.Values;    
            }
        }

		public PackageFile()
        {
        }

        public PackageFile(string filename)
        {
            Open(filename);
        }

        public void Dispose()
        {
            if (_file != null)
            {
                _file.Close();
                _file = null;
            }
        }

        public void Open(string filename)
        {
            _file = new FileStream(filename, FileMode.Open, FileAccess.Read);
            _reader = new BinaryReader(_file);

            CheckFileId();

            _numberOfFiles = _reader.ReadUInt32();

            // Skip checksum
            _reader.ReadUInt32();

            ReadFileEntries();
        }

        private void ReadFileEntries()
        {
			AssertFile();

            for (UInt32 i = 0; i < _numberOfFiles; i++)
            {
                string name = ReadFileName();
				UInt32 offset = _reader.ReadUInt32();
				UInt32 size = _reader.ReadUInt32();

				// Skip checksum
				_reader.ReadUInt32();

                _files[name] = new PackageEntry
                {
                    Name = name,
                    Offset = offset,
                    Length = size
                }; 
			}
		}

        private string ReadFileName()
        {
			AssertFile();
			
            MemoryStream mstr = new MemoryStream();

            byte b = _reader.ReadByte();
            while (b != 0)
            {
                mstr.WriteByte(b);
                b = _reader.ReadByte();
            }

            if (mstr.Length == 0) throw new Exception("Empty file name in archive");

            return Encoding.ASCII.GetString(mstr.ToArray());
        }

        private void CheckFileId()
        {
            AssertFile();

            byte[] id = _reader.ReadBytes(4);
            string idstr = Encoding.ASCII.GetString(id);

            if (idstr == "UPAK") return;
            if (idstr == "ULZ4")
            {
                Compressed = true;
                return;
            }

            throw new Exception("Not a valid package file");
        }

        private void AssertFile()
        {
            if (_file == null || _reader == null) throw new Exception("File not open");
        }
    }


#>